window.HB=function(){"use strict";var a=Math.sin,b=Math.cos,c=Math.PI;const d={version:"v0.2.1",noUpdate:!1,toLoad:0,loadTimeout:5e3,frames:0,prevTime:0,mousePos:[0,0],mouseIsPressed:!1,keysPressed:{},canvas:void 0,gl:void 0,renderer:void 0,vertexArray:void 0,maxVertexCount:2e3,vertices:void 0,vertexBuffer:void 0,maxIndexCount:3e3,indices:void 0,indexBuffer:void 0,textures:{},batch:void 0,camera:void 0,shader:void 0,setup:function(){function a(){"function"==typeof setup&&setup(),"function"==typeof update&&!0!==d.noUpdate&&requestAnimationFrame(d.update)}if(console.log("Hummingbird "+d.version+" by SantaClausNL. https://www.santaclausnl.ga/"),"function"==typeof preload){preload();const b=document.createTextNode("LOADING...");if(document.body.appendChild(b),0>=d.toLoad)a();else{let c=0;const e=setInterval(()=>{0>=d.toLoad||c>=d.loadTimeout?(c>=d.loadTimeout&&console.warn("Failed to load assets."),clearInterval(e),b.remove(),a()):c+=25},25)}}else a()},init:function(a,b,c){if(void 0===c&&(c={}),!0===c.noUpdate&&(d.noUpdate=!0),void 0===c.canvas?(d.canvas=document.createElement("CANVAS"),d.gl=d.canvas.getContext("webgl2"),void 0===c.parent?document.body.appendChild(d.canvas):c.parent.appendChild(d.canvas)):(d.canvas=c.canvas,gl=d.canvas.getContext("webgl2")),null===d.gl){d.canvas.parentNode.removeChild(d.canvas);const a=document.createElement("p");a.innerText="WebGL2 is not supported on your browser or machine.",void 0===c.parent?document.body.appendChild(a):c.parent.appendChild(a)}else d.canvas.width=a||100,d.canvas.height=b||100,d.canvas.id=void 0===c.id?"HummingbirdCanvas":c.id,d.renderer=new d.Renderer;window.addEventListener("keydown",a=>{d.keysPressed[a.keyCode]=!0,"function"==typeof keyPressed&&keyPressed(a)}),window.addEventListener("keyup",a=>{d.keysPressed[a.keyCode]=!1,"function"==typeof keyReleased&&keyReleased(a)}),window.addEventListener("mousemove",a=>{d.mousePos=d.getMousePos(a),"function"==typeof mouseMoved&&mouseMoved(a)}),window.addEventListener("mousedown",a=>{d.mouseIsPressed=!0,"function"==typeof mousePressed&&mousePressed(a)}),window.addEventListener("mouseup",a=>{d.mouseIsPressed=!1,"function"==typeof mouseReleased&&mouseReleased(a)}),window.addEventListener("beforeunload",()=>{d.renderer.delete()})},resizeWindow:function(a,b){d.canvas.width=a||100,d.canvas.height=b||100,d.gl.viewport(0,0,d.canvas.width,d.canvas.height),camera.projectionMatrix=Mat4.orthographic(0,d.canvas.width,0,d.canvas.height,-1,1)},update:function(a){const b=a-d.prevTime;d.prevTime=a,d.camera.setMVP(),update(b),d.frames++,requestAnimationFrame(d.update)},Renderer:class{constructor(){d.gl.enable(d.gl.BLEND),d.gl.blendFunc(d.gl.SRC_ALPHA,d.gl.ONE_MINUS_SRC_ALPHA),d.gl.clearColor(0,0,0,1),d.shader=new d.Shader,d.shader.bind();const a=[];for(let b=0;16>b;b++)a[b]=b;d.shader.setUniformArray("i","uTextureIds",a);{const a=d.gl.createTexture();d.gl.activeTexture(d.gl.TEXTURE0),d.gl.bindTexture(d.gl.TEXTURE_2D,a),d.gl.texParameteri(d.gl.TEXTURE_2D,d.gl.TEXTURE_MIN_FILTER,d.gl.NEAREST),d.gl.texParameteri(d.gl.TEXTURE_2D,d.gl.TEXTURE_MAG_FILTER,d.gl.NEAREST),d.gl.texParameteri(d.gl.TEXTURE_2D,d.gl.TEXTURE_WRAP_S,d.gl.REPEAT),d.gl.texParameteri(d.gl.TEXTURE_2D,d.gl.TEXTURE_WRAP_T,d.gl.REPEAT),d.gl.texImage2D(d.gl.TEXTURE_2D,0,d.gl.RGBA8,1,1,0,d.gl.RGBA,d.gl.UNSIGNED_BYTE,new Uint8Array([255,255,255,255]))}d.batch=new d.Batch,d.vertexArray=new d.VertexArray,d.vertices=new Float32Array(10*d.maxVertexCount),d.vertexBuffer=new d.VertexBuffer(d.vertices),d.vertexArray.layout.add("aVertexPosition",d.gl.FLOAT,3),d.vertexArray.layout.add("aVertexColor",d.gl.FLOAT,4),d.vertexArray.layout.add("aTexturePosition",d.gl.FLOAT,2),d.vertexArray.layout.add("aTextureId",d.gl.FLOAT,1),d.vertexArray.addBuffer(d.vertexBuffer),d.indices=new Uint32Array(d.maxIndexCount),d.indexBuffer=new d.IndexBuffer(d.indices),d.camera=new d.Camera}clear(){d.gl.clear(d.gl.COLOR_BUFFER_BIT)}draw(a){d.shader.bind(),d.vertexArray.bind(),d.gl.drawElements(d.gl.TRIANGLES,a,d.gl.UNSIGNED_INT,0)}delete(){Object.values(d.textures).forEach(a=>{a.delete()}),d.shader.delete(),d.vertexArray.delete(),d.vertexBuffer.delete(),d.indexBuffer.delete()}},Camera:class{constructor(){d.gl.viewport(0,0,d.canvas.width,d.canvas.height),this.projectionMatrix=d.Mat4.new(1),d.Mat4.orthographic(this.projectionMatrix,0,d.canvas.width,0,d.canvas.height,-1,1),this.viewMatrix=d.Mat4.new(1),this.modelMatrix=d.Mat4.new(1)}setMVP(a=void 0){if(a===void 0){const b=d.Mat4.new(1);d.Mat4.multMat4(b,this.modelMatrix,this.viewMatrix),a=d.Mat4.new(1),d.Mat4.multMat4(a,b,this.projectionMatrix)}d.shader.bind(),d.shader.setUniformMatrix("f","uMVP",a)}translate(a){d.Mat4.translate(this.viewMatrix,this.viewMatrix,a)}},Batch:class{constructor(){this.vertexCount=0,this.indexCount=0,this.textureIndex=1,this.textureCache={}}begin(){this.reset()}end(){this.flush()}reset(){this.vertexCount=0,this.indexCount=0,this.textureIndex=1,this.textureCache={}}drawColoredRect(a,b,c,e,f){(this.vertexCount+4>=d.maxVertexCount||this.indexCount+6>=d.maxIndexCount)&&this.flush();const g=10*this.vertexCount;d.vertices[g]=a,d.vertices[g+1]=b,d.vertices[g+2]=0,d.vertices[g+3]=f[0],d.vertices[g+4]=f[1],d.vertices[g+5]=f[2],d.vertices[g+6]=f[3],d.vertices[g+7]=0,d.vertices[g+8]=0,d.vertices[g+9]=0,d.vertices[g+10]=a+c,d.vertices[g+11]=b,d.vertices[g+12]=0,d.vertices[g+13]=f[0],d.vertices[g+14]=f[1],d.vertices[g+15]=f[2],d.vertices[g+16]=f[3],d.vertices[g+17]=1,d.vertices[g+18]=0,d.vertices[g+19]=0,d.vertices[g+20]=a+c,d.vertices[g+21]=b+e,d.vertices[g+22]=0,d.vertices[g+23]=f[0],d.vertices[g+24]=f[1],d.vertices[g+25]=f[2],d.vertices[g+26]=f[3],d.vertices[g+27]=1,d.vertices[g+28]=1,d.vertices[g+29]=0,d.vertices[g+30]=a,d.vertices[g+31]=b+e,d.vertices[g+32]=0,d.vertices[g+33]=f[0],d.vertices[g+34]=f[1],d.vertices[g+35]=f[2],d.vertices[g+36]=f[3],d.vertices[g+37]=0,d.vertices[g+38]=1,d.vertices[g+39]=0,d.indices[this.indexCount]=this.vertexCount,d.indices[this.indexCount+1]=this.vertexCount+1,d.indices[this.indexCount+2]=this.vertexCount+2,d.indices[this.indexCount+3]=this.vertexCount+2,d.indices[this.indexCount+4]=this.vertexCount+3,d.indices[this.indexCount+5]=this.vertexCount,this.vertexCount+=4,this.indexCount+=6}drawTexturedRect(a,b,c,e,f){(this.vertexCount+4>=d.maxVertexCount||this.indexCount+6>=d.maxIndexCount)&&this.flush();let g=this.textureCache[f.name];g===void 0&&(16<=this.textureIndex+1&&this.flush(),this.textureCache[f.name]=g=this.textureIndex,f.bind(this.textureIndex++));const h=10*this.vertexCount;d.vertices[h]=a,d.vertices[h+1]=b,d.vertices[h+2]=0,d.vertices[h+3]=1,d.vertices[h+4]=1,d.vertices[h+5]=1,d.vertices[h+6]=1,d.vertices[h+7]=0,d.vertices[h+8]=0,d.vertices[h+9]=g,d.vertices[h+10]=a+c,d.vertices[h+11]=b,d.vertices[h+12]=0,d.vertices[h+13]=1,d.vertices[h+14]=1,d.vertices[h+15]=1,d.vertices[h+16]=1,d.vertices[h+17]=1,d.vertices[h+18]=0,d.vertices[h+19]=g,d.vertices[h+20]=a+c,d.vertices[h+21]=b+e,d.vertices[h+22]=0,d.vertices[h+23]=1,d.vertices[h+24]=1,d.vertices[h+25]=1,d.vertices[h+26]=1,d.vertices[h+27]=1,d.vertices[h+28]=1,d.vertices[h+29]=g,d.vertices[h+30]=a,d.vertices[h+31]=b+e,d.vertices[h+32]=0,d.vertices[h+33]=1,d.vertices[h+34]=1,d.vertices[h+35]=1,d.vertices[h+36]=1,d.vertices[h+37]=0,d.vertices[h+38]=1,d.vertices[h+39]=g,d.indices[this.indexCount]=this.vertexCount,d.indices[this.indexCount+1]=this.vertexCount+1,d.indices[this.indexCount+2]=this.vertexCount+2,d.indices[this.indexCount+3]=this.vertexCount+2,d.indices[this.indexCount+4]=this.vertexCount+3,d.indices[this.indexCount+5]=this.vertexCount,this.vertexCount+=4,this.indexCount+=6}flush(){d.vertexBuffer.partialWrite(d.vertices,10*this.vertexCount),d.indexBuffer.partialWrite(d.indices,this.indexCount),d.renderer.draw(this.indexCount),this.reset()}},Shader:class{constructor(a,b){this.vertexShaderSource=a||`
					attribute vec4 aVertexPosition;
					attribute vec4 aVertexColor;
					attribute vec2 aTexturePosition;
					attribute float aTextureId;

					varying vec4 vVertexColor;
					varying vec2 vTexturePosition;
					varying float vTextureId;

					uniform mat4 uMVP;

					void main() {
						gl_Position = uMVP * aVertexPosition;
						vVertexColor = aVertexColor;
						vTexturePosition = aTexturePosition;
						vTextureId = aTextureId;
					}
				`,this.fragmentShaderSource=b||`
					precision mediump float;
					varying vec4 vVertexColor;
					varying vec2 vTexturePosition;
					varying float vTextureId;

					uniform sampler2D uTextureIds[16];

					void main() {
						for(int i = 0; i < 16; i++) {
							if(i == int(vTextureId)) {
								gl_FragColor = texture2D(uTextureIds[i], vTexturePosition) * vVertexColor;
								break;
							}
						}
					}
				`,this.id=this.createProgram(this.vertexShaderSource,this.fragmentShaderSource),this.attribLocationCache={},this.uniformLocationCache={}}createProgram(a,b){const c=d.gl.createProgram(),e=this.compileShader(d.gl.VERTEX_SHADER,a),f=this.compileShader(d.gl.FRAGMENT_SHADER,b);return d.gl.attachShader(c,e),d.gl.attachShader(c,f),d.gl.linkProgram(c),d.gl.validateProgram(c),d.gl.deleteShader(e),d.gl.deleteShader(f),c}compileShader(a,b){const c=d.gl.createShader(a);return d.gl.shaderSource(c,b),d.gl.compileShader(c),!1===d.gl.getShaderParameter(c,d.gl.COMPILE_STATUS)?(console.error(d.gl.getShaderInfoLog(c)),d.gl.deleteShader(c),null):c}getAttribLocation(a){return void 0===this.attribLocationCache[a]&&(this.attribLocationCache[a]=d.gl.getAttribLocation(this.id,a)),this.attribLocationCache[a]}getUniformLocation(a){return void 0===this.uniformLocationCache[a]&&(this.uniformLocationCache[a]=d.gl.getUniformLocation(this.id,a)),this.uniformLocationCache[a]}setUniform(a,b,c){d.gl["uniform"+c.length+a](this.getUniformLocation(b),c[0],c[1],c[2],c[3])}setUniformArray(a,b,c,e=1){d.gl["uniform"+e+a+"v"](this.getUniformLocation(b),c)}setUniformMatrix(a,b,c){d.gl["uniformMatrix"+Math.sqrt(c.length)+a+"v"](this.getUniformLocation(b),!0,c)}bind(){d.gl.useProgram(this.id)}unbind(){d.gl.useProgram(null)}delete(){this.unbind(),d.gl.deleteProgram(this.id)}},VertexBuffer:class{constructor(a){this.type=d.gl.ARRAY_BUFFER,this.id=d.gl.createBuffer(),this.bind(),d.gl.bufferData(this.type,a,d.gl.DYNAMIC_DRAW)}write(a){d.gl.bufferSubData(this.type,0,a)}partialWrite(a,b){d.gl.bufferSubData(this.type,0,a,0,b)}bind(){d.gl.bindBuffer(this.type,this.id)}unbind(){d.gl.bindBuffer(this.type,null)}delete(){this.unbind(),d.gl.deleteBuffer(this.id)}},IndexBuffer:class{constructor(a){this.type=d.gl.ELEMENT_ARRAY_BUFFER,this.id=d.gl.createBuffer(),this.bind(),d.gl.bufferData(this.type,a,d.gl.DYNAMIC_DRAW)}write(a){d.gl.bufferSubData(this.type,0,a)}partialWrite(a,b){d.gl.bufferSubData(this.type,0,a,0,b)}bind(){d.gl.bindBuffer(this.type,this.id)}unbind(){d.gl.bindBuffer(this.type,null)}delete(){this.unbind(),d.gl.deleteBuffer(this.id)}},VertexArray:class{constructor(){this.id=d.gl.createVertexArray(),d.gl.bindVertexArray(this.id);this.layout=new class{constructor(){this.elements=[],this.stride=0}add(a,b,c,e=!1){const f=d.shader.getAttribLocation(a);return-1!==f&&this.elements.push({index:f,type:b,count:c,normalized:e}),this.stride+=c*d.bytes(b),f}clear(){this.elements=[],this.stride=0}}}addBuffer(a){this.bind(),a.bind();let b=0;this.layout.elements.forEach(a=>{d.gl.enableVertexAttribArray(a.index),d.gl.vertexAttribPointer(a.index,a.count,a.type,a.normalized,this.layout.stride,b),b+=a.count*d.bytes(a.type)})}bind(){d.gl.bindVertexArray(this.id)}unbind(){d.gl.bindVertexArray(null)}delete(){this.unbind(),d.vertexArray.layout.elements.forEach(a=>d.gl.disableVertexAttribArray(a.index)),d.gl.deleteVertexArray(this.id)}},Texture:class{constructor(a,b){this.id=d.gl.createTexture(),this.createTexture(b),this.name=a,d.textures[this.name]=this}setErrorTexture(){const a=new Uint8Array([255,255,255,255,191,191,191,255,191,191,191,255,255,255,255,255]);this.setTextureParameters(d.gl.NEAREST,d.gl.REPEAT),d.gl.texImage2D(d.gl.TEXTURE_2D,0,d.gl.RGBA8,2,2,0,d.gl.RGBA,d.gl.UNSIGNED_BYTE,a)}createTexture(a){if(this.bind(),this.setErrorTexture(),void 0===a)return;const b=new Image;b.onload=()=>{this.bind(),this.setTextureParameters(d.gl.LINEAR,d.gl.CLAMP_TO_EDGE),d.gl.texImage2D(d.gl.TEXTURE_2D,0,d.gl.RGBA8,d.gl.RGBA,d.gl.UNSIGNED_BYTE,b),this.textureIndex=void 0},b.src=a,this.textureIndex=void 0}setTextureParameters(a,b){d.gl.texParameteri(d.gl.TEXTURE_2D,d.gl.TEXTURE_MIN_FILTER,a),d.gl.texParameteri(d.gl.TEXTURE_2D,d.gl.TEXTURE_MAG_FILTER,a),d.gl.texParameteri(d.gl.TEXTURE_2D,d.gl.TEXTURE_WRAP_S,b),d.gl.texParameteri(d.gl.TEXTURE_2D,d.gl.TEXTURE_WRAP_T,b)}bind(a=1){d.gl.activeTexture(d.gl["TEXTURE"+a]),d.gl.bindTexture(d.gl.TEXTURE_2D,this.id)}unbind(){d.gl.bindTexture(d.gl.TEXTURE_2D,null)}delete(){this.unbind(),d.gl.deleteTexture(this.id)}},bytes:function(a){return a===d.gl.FLOAT||a===d.gl.UNSIGNED_INT?4:a===d.gl.BYTE?1:void 0},getMousePos:function(a){const b=d.canvas.getBoundingClientRect(),c=document.body;return[a.clientX-b.left-c.scrollLeft,a.clientY-b.top-c.scrollTop]},Meth:class{static radians(a){return a*(c/180)}static degrees(a){return a*(180/c)}static map(a,b,c,d,e){return d+(e-d)*(a-b)/(c-b)}static random(a,b){return void 0===b?void 0===a?Math.random():Math.random()*a:Math.random()*(b-a)+a}static randomInt(a,b){return Math.floor(random(a,b))}},Mat4:class{static new(a=0){return[a,0,0,0,0,a,0,0,0,0,a,0,0,0,0,a]}static orthographic(a,b,c,d,e,f=-1,g=1){const h=c-b,i=d-e,j=g-f;a[0]=2/h,a[1]=0,a[2]=0,a[3]=-(c+b)/h,a[4]=0,a[5]=2/i,a[6]=0,a[7]=-(d+e)/i,a[8]=0,a[9]=0,a[10]=-2/j,a[11]=-(g+f)/j,a[12]=0,a[13]=0,a[14]=0,a[15]=1}static perspective(a,b,c,d){let e=1/Math.tan(a/2),f=1/(c-d);return[e/b,0,0,0,0,e,0,0,0,0,(d+c)*f,-1,0,0,2*d*c*f,0]}static multMat4(a,b,c){const e=d.Vec4.multMat4([c[0],c[1],c[2],c[3]],b),f=d.Vec4.multMat4([c[4],c[5],c[6],c[7]],b),g=d.Vec4.multMat4([c[8],c[9],c[10],c[11]],b),h=d.Vec4.multMat4([c[12],c[13],c[14],c[15]],b);a[0]=e[0],a[1]=e[1],a[2]=e[2],a[3]=e[3],a[4]=f[0],a[5]=f[1],a[6]=f[2],a[7]=f[3],a[8]=g[0],a[9]=g[1],a[10]=g[2],a[11]=g[3],a[12]=h[0],a[13]=h[1],a[14]=h[2],a[15]=h[3]}static scale(a,b,c){d.Mat4.multMat4(a,b,[c,0,0,0,0,c,0,0,0,0,c,0,0,0,0,1])}static translate(a,b,c){d.Mat4.multMat4(a,b,[1,0,0,c[0],0,1,0,c[1],0,0,1,c[2],0,0,0,1])}static rotateX(c,e,f){d.Mat4.multMat4(c,e,[1,0,0,0,0,b(-f),a(f),0,0,a(-f),b(-f),0,0,0,0,1])}static rotateY(c,e,f){d.Mat4.multMat4(c,e,[b(-f),0,a(-f),0,0,1,0,0,a(f),0,b(-f),0,0,0,0,1])}static rotateZ(c,e,f){d.Mat4.multMat4(c,e,[b(-f),a(f),0,0,a(-f),b(-f),0,0,0,0,1,0,0,0,0,1])}},Vec2:class{static new(a,b){return[a,b]}},Vec3:class{static new(a,b,c){return[a,b,c]}},Vec4:class{static new(a,b,c,d){return[a,b,c,d]}static multVec4(a,b){return[a[0]*b[0],a[1]*b[1],a[2]*b[2],a[3]*b[3]]}static multMat4(a,b){return[a[0]*b[0]+a[1]*b[4]+a[2]*b[8]+a[3]*b[12],a[0]*b[1]+a[1]*b[5]+a[2]*b[9]+a[3]*b[13],a[0]*b[2]+a[1]*b[6]+a[2]*b[10]+a[3]*b[14],a[0]*b[3]+a[1]*b[7]+a[2]*b[11]+a[3]*b[15]]}}};return d}(),window.addEventListener("load",HB.setup);